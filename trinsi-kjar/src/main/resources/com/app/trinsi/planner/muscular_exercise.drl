package com.app.trinsi.planner

//list any import classes here.
import com.app.trinsi.model.UserPlanner;
import com.app.trinsi.model.MusclesGroupDate;
import com.app.trinsi.model.ACTIVITY_LEVEL;
import com.app.trinsi.model.MUSCLES_GROUP;
import java.util.Date;
//declare any global variables here

rule "Num of exercise 3"
    agenda-group "calculate"
    when
        $p: UserPlanner(activityLevel == ACTIVITY_LEVEL.INACTIVE || activityLevel == ACTIVITY_LEVEL.MINIMUM)
    then
        System.out.println("ex 3");
        modify($p){setNumOfExerciseMuscular(3);}
end

rule "Num of exercise 4"
    agenda-group "calculate"
    when
        $p: UserPlanner(activityLevel == ACTIVITY_LEVEL.ACTIVE)
    then
        System.out.println("ex 4");
        modify($p){setNumOfExerciseMuscular(4);}
end

rule "Num of sets 1 a"
    agenda-group "planner"
    when
        $p: UserPlanner(setsMuscular != 1, old == true)
    then
        System.out.println("1 a");
        modify($p){setSetsMuscular(1);}
end

rule "Num of sets 1 b"
    agenda-group "planner"
    when
        $p: UserPlanner(activityLevel == ACTIVITY_LEVEL.INACTIVE, setsMuscular != 1)
    then
        System.out.println("1 b");
        modify($p){setSetsMuscular(1);}
end

rule "Num of sets 2"
    agenda-group "planner"
    when
        $p: UserPlanner(activityLevel == ACTIVITY_LEVEL.MINIMUM, setsMuscular != 2, old == false)
    then
        System.out.println("2");
        modify($p){setSetsMuscular(2);}
end

rule "Num of sets 3"
    agenda-group "calculate"
    when
        $p: UserPlanner(activityLevel == ACTIVITY_LEVEL.ACTIVE, setsMuscular != 3, old == false)
    then
        System.out.println("3");
        modify($p){setSetsMuscular(3);}
end

rule "Muscular repetitions for inactive, minimum active and old"
    agenda-group "calculate"
    when
        $p: UserPlanner(activityLevel == ACTIVITY_LEVEL.INACTIVE || activityLevel == ACTIVITY_LEVEL.MINIMUM
            || old == true, $ni: numIntensity)
    then
        System.out.println("mus 10 +");
        modify($p){setRepetitionMuscular(Math.min($ni / 3 + 10, 15));}
end

rule "Muscular repetitions for active"
    agenda-group "calculate"
    when
        $p: UserPlanner(activityLevel == ACTIVITY_LEVEL.ACTIVE, old == false, $ni: numIntensity)
    then
        System.out.println("mus 8 +");
        modify($p){setRepetitionMuscular(Math.min($ni / 3 + 8, 12));}
end

rule "Muscular group"
    agenda-group "calculate"
    no-loop
    when
        $p: UserPlanner($mg: musclesGroup, $mgd: musclesGroupDates)
        $idx: Integer() from accumulate(
            $m: MusclesGroupDate($date: date) from $mgd,
            init(int i = 0;
                 int idx = 0;
                 Date date = null;),
            action(
                if(i == 0) {
                    date = $date;
                }
                else {
                    if (date != null) {
                        if($date == null) {
                            idx = i;
                            date = $date;
                        }
                        else {
                            if(date.after($date)) {
                                idx = i;
                                date = $date;
                            }
                        }
                    }
                }
                i += 1;),
            result(idx)
        )
        $cm: MusclesGroupDate() from $mgd.get($idx)
    then
        System.out.println($cm);
        modify($p){setMusclesGroup($cm.getMusclesGroup()),
                   getMusclesGroupDates().get($idx).setDate(new Date());
        }
end