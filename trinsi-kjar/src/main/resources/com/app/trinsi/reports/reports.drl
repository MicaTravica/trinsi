package com.app.trinsi.reports

//list any import classes here.
import com.app.trinsi.model.CATEGORY;
import com.app.trinsi.model.EXERCISE_TYPE;
import com.app.trinsi.model.Exercise;
import com.app.trinsi.model.UserPlanner;
import com.app.trinsi.model.MissingExercises;
import java.util.ArrayList;
//declare any global variables here

rule "Report missing exercises"
    agenda-group "reports"
    when
        $category: CATEGORY()
        $exerciseType: EXERCISE_TYPE()
        not (MissingExercises($exerciseType == exerciseType, $category == category))
        accumulate(
            $e : Exercise(
            $category == exerciseWeight,
            $exerciseType == exerciseType),
            $exercises: collectList($e)
        )
        accumulate(
            $p : UserPlanner(
            $category == category,
            $exerciseType == exerciseType),
            $userPlanners: collectList($p)
        )
        eval($userPlanners.size() == 0)
    then
        insert(new MissingExercises($exerciseType, $category, 0));
end

rule "Report missing exercises 2"
    agenda-group "reports"
    when
        $category: CATEGORY()
        $exerciseType: EXERCISE_TYPE()
        not (MissingExercises($exerciseType == exerciseType, $category == category))
        accumulate(
            $e : Exercise(
            $category == exerciseWeight,
            $exerciseType == exerciseType),
            $exercises: collectList($e)
        )
        $m: Integer() from accumulate(
            $p : UserPlanner(
            $category == category,
            $exerciseType == exerciseType,
            $nof: numOfExercise),
            max ($nof)
        )
    then
        insert(new MissingExercises($exerciseType, $category, Math.max(0, $m - $exercises.size())));
end


//rule "Report missing exercises"
//    agenda-group "reports"
//    when
//        $category: CATEGORY()
//        $exerciseType: EXERCISE_TYPE()
//        not (MissingExercises($exerciseType == exerciseType, $category == category))
//        accumulate(
//            $e : Exercise(
//            $category == exerciseWeight,
//            $exerciseType == exerciseType),
//            $exercises: collectList($e)
//        )
//        $m: Integer() from accumulate(
//            $p : UserPlanner(
//            $category == category,
//            $exerciseType == exerciseType,
//            $nof: numOfExercise),
//            init (int max = 0;),
//            action (max = Math.max(max, $nof);),
//            result (max)
//        )
//    then
//        insert(new MissingExercises($exerciseType, $category, Math.max(0, $m - $exercises.size())));
//end
