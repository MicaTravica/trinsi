package com.app.trinsi.alarm

//list any import classes here.
import com.app.trinsi.model.HEALTH_CONDITION;
import com.app.trinsi.model.HeartBeatTracking;
import com.app.trinsi.model.Alarm;
//declare any global variables here

rule "Breathe deeply, health condition bad"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse + 5), $tp < currentPulse, healthCondition == HEALTH_CONDITION.BAD )
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Breathe deeply"));
end

rule "Breathe deeply, health condition not bad"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse + 5), $tp < currentPulse, healthCondition != HEALTH_CONDITION.BAD )
        $n: Number(intValue == 0) from accumulate(
            $hb2 : HeartBeatTracking(
            this != $hb1,
            userId == $id,
            $tp >= currentPulse,
            this before[0m, 10m] $hb1),
            count($hb2)
        )
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Breathe deeply"));
end

rule "Take a break of 2 minutes, walk, health condition bad"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse + 10), $tp < currentPulse, healthCondition == HEALTH_CONDITION.BAD )
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Take a break of 2 minutes, walk"));
end

rule "Take a break of 2 minutes, walk, health condition not bad"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse + 10), $tp < currentPulse, healthCondition != HEALTH_CONDITION.BAD )
        $n: Number(intValue == 0) from accumulate(
            $hb2 : HeartBeatTracking(
            this != $hb1,
            userId == $id,
            $tp >= currentPulse,
            this before[0m, 5m] $hb1),
            count($hb2)
        )
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Take a break of 2 minutes, walk"));
end

rule "Take a break of 5 minutes, walk, health condition bad or middle"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse + 20), $tp < currentPulse,
                            healthCondition == HEALTH_CONDITION.BAD || healthCondition == HEALTH_CONDITION.MIDDLE)
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Take a break of 5 minutes, walk"));
end

rule "Take a break of 5 minutes, walk, health condition good"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse + 20), $tp < currentPulse, healthCondition == HEALTH_CONDITION.GOOD)
        $n: Number(intValue == 0) from accumulate(
            $hb2 : HeartBeatTracking(
            this != $hb1,
            userId == $id,
            $tp >= currentPulse,
            this before[0m, 1m] $hb1),
            count($hb2)
        )
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Take a break of 5 minutes, walk"));
end

rule "Stop exercising"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse + 30), $tp < currentPulse )
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Stop exercising"));
end

rule "Speed up"
    salience $tp
    when
        $hb1: HeartBeatTracking( $id: userId, $tp: (targetPulse - 30), $tp > currentPulse)
        $n: Number(intValue == 0) from accumulate(
        $hb2 : HeartBeatTracking(
            this != $hb1,
            userId == $id,
            $tp <= currentPulse,
            this before[0m, 10m] $hb1),
            count($hb2)
        )
        not (Alarm(userId == $id))
    then
        insert(new Alarm($id, "Speed up"));
end


